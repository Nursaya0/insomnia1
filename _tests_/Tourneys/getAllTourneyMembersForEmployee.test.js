require("dotenv").config();
const axios = require("axios");
const qs = require("qs");

let token;

describe("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (OTP, x-member-id)", () => {
  beforeAll(async () => {
    const data = qs.stringify({
      grant_type: "password",
      phone_number: "77474818132", // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä
      client_id: "mobile-frontend",
      code: "8132" // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π OTP-–∫–æ–¥
    });

    const response = await axios.post(
      `${process.env.KEYCLOAK_URL}/protocol/openid-connect/token`,
      data,
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      }
    );

    expect(response.status).toBe(200);
    token = response.data.access_token;
  });

  it("üìã –î–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞", async () => {
    const graphqlQuery = {
      query: `
        query($tourneyId: Int!, $page: Int!, $size: Int!) {
          tourneyMembers(tourneyId: $tourneyId, page: $page, size: $size) {
            content {
              name
              numberOfOrders
              place
              reward
            }
            totalElements
          }
        }
      `,
      variables: {
        tourneyId: 123, // ‚ùó –ó–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞
        page: 0,
        size: 10
      }
    };

    const response = await axios.post(
      process.env.GRAPHQL_URL,
      graphqlQuery,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
          "x-org-id": "55",
          "x-member-id": "69114"
        }
      }
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
    console.dir(response.data, { depth: null, colors: true });

    expect(response.status).toBe(200);
    expect(response.data.data.tourneyMembers).toHaveProperty("content");
    expect(Array.isArray(response.data.data.tourneyMembers.content)).toBe(true);
  });
});
