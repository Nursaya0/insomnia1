require('dotenv').config();
const axios = require('axios');
const qs = require('qs');

let accessToken;

describe('üí∏ –ê–¥–º–∏–Ω: —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–ª–∞—Ç', () => {
  it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    // üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
    const data = qs.stringify({
      grant_type: 'password',
      phone_number: process.env.ADMIN_PHONE_NUMBER,
      client_id: process.env.ADMIN_CLIENT_ID,
      code: process.env.ADMIN_OTP_CODE,
    });

    const tokenRes = await axios.post(
      `${process.env.KEYCLOAK_URL}/protocol/openid-connect/token`,
      data,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      }
    );

    expect(tokenRes.status).toBe(200);
    accessToken = tokenRes.data.access_token;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω');

    // üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–ª–∞—Ç
    const query = `
      mutation {
        createGlobalPayoutSetting(
          input: {
            payout: {
              minSingleAmount: 1
              maxSingleAmount: 102
              maxDailyCount: 1
              maxDailyAmount: 20005
              maxMonthlyAmount: 300001
            }
            commission: {
              absoluteBelowThreshold: 0
              percentAboveThreshold: 0.3
            }
            commissionThreshold: 104
          }
        ) {
          id
        }
      }
    `;

    const res = await axios.post(
      process.env.GRAPHQL_URL,
      { query },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    expect(res.status).toBe(200);
    const settingId = res.data.data?.createGlobalPayoutSetting?.id;
    if (settingId) {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. ID:', settingId);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', JSON.stringify(res.data, null, 2));
    }
  });
});
