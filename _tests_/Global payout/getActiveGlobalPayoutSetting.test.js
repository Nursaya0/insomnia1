require('dotenv').config();
const axios = require('axios');
const qs = require('qs');

let accessToken;

describe('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', () => {
  it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å access_token', async () => {
    const payload = qs.stringify({
      grant_type: 'password',
      phone_number: process.env.ADMIN_PHONE_NUMBER,
      client_id: process.env.ADMIN_CLIENT_ID,
      code: process.env.ADMIN_OTP_CODE,
    });

    const res = await axios.post(
      `${process.env.KEYCLOAK_URL}/protocol/openid-connect/token`,
      payload,
      { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
    );

    expect(res.status).toBe(200);
    accessToken = res.data.access_token;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω');
  });
});

describe('üîé –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–ª–∞—Ç', () => {
  it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async () => {
    const query = `
      query {
        activeGlobalPayoutSetting {
          id
          payout {
            maxDailyCount
            maxDailyAmount
            maxMonthlyAmount
            maxSingleAmount
            minSingleAmount
          }
          commission {
            absoluteBelowThreshold
            percentAboveThreshold
          }
          commissionThreshold
          status
        }
      }
    `;

    const res = await axios.post(
      process.env.GRAPHQL_URL,
      { query },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    expect(res.status).toBe(200);
    const setting = res.data.data.activeGlobalPayoutSetting;

    expect(setting).toHaveProperty('id');
    expect(setting).toHaveProperty('payout');
    expect(setting).toHaveProperty('commission');
    expect(setting).toHaveProperty('commissionThreshold');
    expect(setting).toHaveProperty('status');

    console.log('‚úÖ –¢–µ–∫—É—â–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', JSON.stringify(setting, null, 2));
  });
});
