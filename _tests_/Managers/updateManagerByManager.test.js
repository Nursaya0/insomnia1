
require("dotenv").config();
const axios = require("axios");
const { getManagerTokenByOtp } = require("../../api/ManagerToken");

describe("‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (ID = 14)", () => {
  let token;

  const variables = {
    id: 14,
    firstName: "Asetova",
    lastName: "Asetov",
    middleName: "Asetovich",
    orgRoleId: 25
  };

  beforeAll(async () => {
    const tokenResponse = await getManagerTokenByOtp();
    token = tokenResponse.access_token;
    expect(token).toBeDefined();
    console.log("üîê –¢–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω");
  });

  it(`–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å ID = ${variables.id}`, async () => {
    const response = await axios.post(
      process.env.GRAPHQL_URL,
      {
        query: `
          mutation UpdateManager(
            $firstName: String
            $lastName: String
            $middleName: String
            $orgRoleId: Int
            $id: Int!
          ) {
            updateManager(
              id: $id
              input: {
                firstName: $firstName
                lastName: $lastName
                middleName: $middleName
                orgRoleId: $orgRoleId
              }
            ) {
              id
            }
          }
        `,
        variables
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
          "x-org-id": process.env.ORG_ID,
          "x-member-id": process.env.MEMBER_ID
        }
      }
    );

    console.log("üì¶ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
    console.dir(response.data, { depth: null, colors: true });

    const updatedId = response.data?.data?.updateManager?.id;

    expect(updatedId).toBe(variables.id);
    console.log(`‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å ID ${updatedId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω`);
  });
});
