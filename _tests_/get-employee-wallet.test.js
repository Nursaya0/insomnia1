// test.skip("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç", () => {});


require("dotenv").config();
const axios = require("axios");
const qs = require("qs");
const chalk = require("chalk");

describe("–ß–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤", () => {
  let accessToken;

  beforeAll(async () => {
    const payload = qs.stringify({
      grant_type: process.env.MANAGER_GRANT_TYPE,
      phone_number: process.env.MANAGER_PHONE_NUMBER,
      client_id: process.env.MANAGER_CLIENT_ID,
      code: process.env.MANAGER_OTP_CODE,
    });

    const response = await axios.post(
      `${process.env.KEYCLOAK_URL}/protocol/openid-connect/token`,
      payload,
      { headers: { "Content-Type": "application/x-www-form-urlencoded" } }
    );

    accessToken = response.data.access_token;
  });

  it("–¥–æ–ª–∂–µ–Ω –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", async () => {
    const query = `
      query ($id: Int!) {
        employee(id: $id) {
          id
          firstName
          lastName
          wallet {
            id
            externalId
            balance
            currency
          }
          berekeWallet {
            id
            externalId
            balance
            currency
          }
          workWallet {
            id
            externalId
            balance
            currency
          }
        }
      }
    `;

    const variables = {
      id: parseInt(process.env.EMPLOYEE_ID),
    };

    const response = await axios.post(
      process.env.GRAPHQL_URL,
      {
        query,
        variables,
      },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          "x-org-id": process.env.ORG_ID,
          "x-member-id": process.env.MEMBER_ID,
        },
      }
    );

    const data = response.data.data.employee;

    // ‚úÖ –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
    console.log(chalk.bold("\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫:"));
    console.log(`${chalk.green("ID:")} ${data.id}`);
    console.log(`${chalk.green("–ò–º—è:")} ${data.firstName}`);
    console.log(`${chalk.green("–§–∞–º–∏–ª–∏—è:")} ${data.lastName}`);

    const printWallet = (walletName, walletData) => {
      console.log(chalk.bold(`\nüíº ${walletName}:`));
      if (!walletData) {
        console.log(chalk.gray("  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"));
      } else {
        console.log(`  ${chalk.cyan("ID")}: ${walletData.id}`);
        console.log(`  ${chalk.cyan("External ID")}: ${walletData.externalId}`);
        console.log(`  ${chalk.cyan("–ë–∞–ª–∞–Ω—Å")}: ${walletData.balance} ${walletData.currency}`);
      }
    };

    printWallet("–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª—ë–∫", data.wallet);
    printWallet("–ë–µ—Ä–µ–∫–µ –∫–æ—à–µ–ª—ë–∫", data.berekeWallet);
    printWallet("–†–∞–±–æ—á–∏–π –∫–æ—à–µ–ª—ë–∫", data.workWallet);

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞
    expect(response.status).toBe(200);
    expect(data).toHaveProperty("id");
  });
});
