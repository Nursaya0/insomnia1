require('dotenv').config();
const axios = require('axios');
const qs = require('qs');

let accessToken;

describe('üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–º–µ–Ω–µ–¥–∂–µ—Ä)', () => {
  beforeAll(async () => {
    const payload = qs.stringify({
      grant_type: process.env.MANAGER_GRANT_TYPE,
      phone_number: process.env.MANAGER_PHONE_NUMBER,
      client_id: process.env.MANAGER_CLIENT_ID,
      code: process.env.MANAGER_OTP_CODE,
    });

    const res = await axios.post(
      `${process.env.KEYCLOAK_URL}/protocol/openid-connect/token`,
      payload,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      }
    );

    expect(res.status).toBe(200);
    accessToken = res.data.access_token;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω');
  });

  it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ ID', async () => {
    const query = `
      mutation {
        deleteOrganizationRole(id: 4) {
          id
        }
      }
    `;

    const res = await axios.post(
      process.env.GRAPHQL_URL,
      { query },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      }
    );

    expect(res.status).toBe(200);
    const deletedId = res.data.data?.deleteOrganizationRole?.id;

    if (deletedId) {
      console.log(`üóë –†–æ–ª—å —Å ID ${deletedId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:', JSON.stringify(res.data, null, 2));
    }
  });
});
